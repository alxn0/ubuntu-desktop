#!/bin/bash

# Utility script to install all the necessary applications and
# configuration files for a new ubuntu workstation.
# Author: Alexandre Naud

# Source logging utilities
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "$SCRIPT_DIR/lib/logging.sh"

# Create function that automatize
# the installation using scripts in the install directory
function install() {
  local script="$1"
  local description="$2"

  if [[ -f "$SCRIPT_DIR/install/$script" ]]; then
    status_info "$description"
    if bash "$SCRIPT_DIR/install/$script"; then
      status_ok "$description"
    else
      status_fail "$description"
      return 1
    fi
  else
    status_fail "$description (script not found)"
    return 1
  fi
}

# Print setup header
echo "" >&3
echo "Ubuntu Workstation Setup" >&3
echo "Log file: $LOGFILE" >&3
echo "" >&3

# Updating repository and upgrading system
section "System Update"
run_task "Updating package lists" sudo apt update
run_task "Upgrading system packages" sudo apt upgrade -y

# Install terminal utilities and system tools
section "Terminal Utilities"
declare -A apt_packages=(
  ["alacritty"]="Terminal emulator"
  ["vim"]="Text editor"
  ["git"]="Version control"
  ["tmux"]="Terminal multiplexer"
  ["xclip"]="Clipboard manager"
  ["tree"]="File tree viewer"
  ["entr"]="File watcher"
  ["ripgrep"]="Search tool"
  ["curl"]="HTTP client"
  ["htop"]="Process viewer"
  ["ddgr"]="DuckDuckGo CLI"
  ["podman"]="Container engine"
  ["age"]="File encryption"
  ["shellcheck"]="Shell script linter"
  ["make"]="Build automation"
)

for package in "${!apt_packages[@]}"; do
  run_silent "  ├─ $package" sudo apt install "$package" -y
done

# Programming languages
section "Programming Languages"
install go "Installing Go"
install nodejs "Installing Node.js"

# Update PATH for current session
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin
source "$HOME/.nvm/nvm.sh" 2>/dev/null || true

# Pipx
section "Python Package Manager"
run_silent "  ├─ pipx" sudo apt install pipx -y
run_silent "  ├─ Configure pipx PATH" pipx ensurepath --force

# Python packages
section "Python CLI Tools"
declare -a pipx_packages=(
  "python-lsp-server"
  "ruff"
  "tldr"
  "llm"
  "uv"
)

for package in "${pipx_packages[@]}"; do
  run_silent "  ├─ $package" pipx install "$package"
done

# LLM plugins
section "LLM Plugins"
run_silent "  ├─ llm-gemini" llm install llm-gemini
run_silent "  ├─ llm-anthropic" llm install llm-anthropic

# Go binaries
section "Go Binaries"
run_silent "  ├─ mods" go install github.com/charmbracelet/mods@latest
run_silent "  ├─ cosign" go install github.com/sigstore/cosign/v2/cmd/cosign@latest
run_silent "  ├─ glow" go install github.com/charmbracelet/glow@latest

# Node.js packages
section "Node.js Packages"
run_silent "  ├─ claude-code" npm install -g @anthropic-ai/claude-code

# Flatpak
section "Flatpak"
run_silent "  ├─ Installing flatpak" sudo apt install flatpak -y
run_silent "  ├─ Adding flathub repository" flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

section "Flatpak Applications"
declare -A flatpak_apps=(
  ["org.zotero.Zotero"]="Zotero"
  ["org.inkscape.Inkscape"]="Inkscape"
  ["org.gimp.GIMP"]="GIMP"
  ["org.keepassxc.KeePassXC"]="KeePassXC"
  ["com.slack.Slack"]="Slack"
  ["org.signal.Signal"]="Signal"
  ["org.videolan.VLC"]="VLC"
  ["org.qbittorrent.qBittorrent"]="qBittorrent"
  ["io.github.ungoogled_software.ungoogled_chromium"]="Ungoogled Chromium"
)

for app_id in "${!flatpak_apps[@]}"; do
  run_silent "  ├─ ${flatpak_apps[$app_id]}" flatpak install "$app_id" -y
done

# Complex installations
section "Additional Applications"
install fzf "Installing fzf (fuzzy finder)"
install sops "Installing SOPS (secrets management)"
install passage "Installing Passage (password manager)"
install gh "Installing GitHub CLI"
install miniconda3 "Installing Miniconda3"
install filen "Installing Filen (cloud storage)"
install ente "Installing Ente (photo storage)"
install protonmail "Installing Proton Mail"
install z "Installing z (directory jumper)"

# Fonts
section "Fonts"
install fonts "Installing fonts"

# AppImage support
section "AppImage Support"
install appimage "Installing AppImage Launcher"

# Configuration
section "Configuration"
run_task "Applying configurations" "$SCRIPT_DIR/configs/setup"

# Cleanup
section "Cleanup"
run_task "Removing unnecessary packages" sudo apt autoremove -y

# Done
echo "" >&3
status_ok "Setup complete!"
echo "" >&3
echo "Full log saved to: $LOGFILE" >&3
echo "" >&3

# Restore original stdout/stderr
exec 1>&3 2>&4
